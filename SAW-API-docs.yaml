openapi: 3.0.1
info:
  title: SAW API
  description: "Documentation of the saw application, which allows organizers to create\
    \ events and collect registrations for them. Every logged in user can sign up\
    \ and comment on the event."
  version: "1.0"
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /user:
    get:
      tags:
      - user-controller
      summary: Get User List
      description: Returns a list of all users
      operationId: getUserList
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagedModelEntityModelUserProjections'
    post:
      tags:
      - user-controller
      summary: Create a new user
      description: All parameters are required. Method returns a new user object
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /ticket/{eventId}:
    post:
      tags:
      - ticket-controller
      summary: Create a new ticket
      description: All parameters are required. Method returns a new ticket object
        for the given user and event
      operationId: createTicket
      parameters:
      - name: eventId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Ticket'
  /review/{eventId}:
    post:
      tags:
      - review-controller
      summary: Create a new review
      description: All parameters are required. Method returns a new review object
      operationId: createReview
      parameters:
      - name: eventId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: content
        in: query
        required: true
        schema:
          type: string
      - name: rating
        in: query
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Review'
  /event:
    get:
      tags:
      - event-controller
      summary: Get Event List
      description: Returns a list of all current events
      operationId: getEventList
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionModelEntityModelEvent'
    post:
      tags:
      - event-controller
      summary: Create a new event
      description: All parameters are required. Method returns a new event object
      operationId: createEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Event'
  /event/{eventId}:
    delete:
      tags:
      - event-controller
      summary: Delete an existing event and its associated data
      description: "Event id is required for deletion. The method deletes the event\
        \ and its associated data: removes the event information in the Users table\
        \ and deletes all ticket for the event. "
      operationId: deleteEvent
      parameters:
      - name: eventId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
    patch:
      tags:
      - event-controller
      summary: Update an existing event
      description: All parameters are required. Method returns a updated event object
      operationId: updateEvent
      parameters:
      - name: eventId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEventRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpdateEventResponse'
  /ticket/{ticketId}:
    get:
      tags:
      - ticket-controller
      summary: Get a Ticket by Id
      description: Returns a Tickets for given ID
      operationId: getTicketDetails
      parameters:
      - name: ticketId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TicketProjections'
    delete:
      tags:
      - ticket-controller
      summary: Delete an existing ticket and its associated data.
      description: "Ticket id is required for deletion. The method removes the ticket\
        \ and its associated data: deletes the ticket information in the Users and\
        \ Events tables."
      operationId: deleteTicket
      parameters:
      - name: ticketId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /ticket/{eventId}/tickets:
    get:
      tags:
      - ticket-controller
      summary: Get Ticket List for Event
      description: Returns a list of all tickets for given event
      operationId: getTicketListOfEvent
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      - name: eventId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionModelEntityModelTicket'
  /review/{eventId}/reviews:
    get:
      tags:
      - review-controller
      summary: Get Reviews for Event
      description: Returns a list of all reviews for given event
      operationId: getReviewsForEvent
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      - name: eventId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionModelEntityModelReview'
  /event/search:
    get:
      tags:
      - event-controller
      summary: Search for a given event
      description: Searching for an event by a given phrase
      operationId: searchEvents
      parameters:
      - name: query
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionModelEvent'
  /user/{userId}:
    delete:
      tags:
      - user-controller
      summary: Delete an existing user and its associated data
      description: "User id is required for deletion. The method deletes the user\
        \ and its associated data: removes the user's information from the Event table\
        \ and deletes all tickets associated with the user."
      operationId: deleteUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /review/{reviewId}:
    delete:
      tags:
      - review-controller
      summary: Delete an existing review and its associated data.
      description: "Review id is required for deletion. The method removes the review\
        \ and its associated data: deletes the review information in the Users and\
        \ Events tables."
      operationId: deleteReview
      parameters:
      - name: reviewId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
components:
  schemas:
    CreateUserRequest:
      required:
      - password
      - userName
      type: object
      properties:
        userName:
          type: string
        password:
          type: string
        email:
          type: string
    Event:
      required:
      - description
      - location
      - price
      - seatingCapacity
      - title
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        location:
          type: string
        price:
          type: number
          format: double
        startingDate:
          type: string
          format: date
        endingDate:
          type: string
          format: date
        seatingCapacity:
          type: integer
          format: int32
        description:
          type: string
        userEntity:
          $ref: '#/components/schemas/User'
        ticketEntities:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Ticket'
        _links:
          $ref: '#/components/schemas/Links'
    Links:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Link'
    Ticket:
      type: object
      properties:
        id:
          type: integer
          format: int64
        purchaseDate:
          type: string
          format: date-time
        barcode:
          type: string
          format: uuid
        eventEntity:
          $ref: '#/components/schemas/Event'
        userEntity:
          $ref: '#/components/schemas/User'
        _links:
          $ref: '#/components/schemas/Links'
    User:
      required:
      - password
      - userName
      type: object
      properties:
        id:
          type: integer
          format: int64
        userName:
          type: string
        password:
          type: string
        email:
          type: string
        userRole:
          type: string
          enum:
          - PARTICIPANT
          - ORGANIZER
        eventEntity:
          $ref: '#/components/schemas/Event'
        ticketEntities:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Ticket'
        _links:
          $ref: '#/components/schemas/Links'
    Review:
      required:
      - content
      - rating
      - title
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        content:
          maxLength: 100
          minLength: 0
          type: string
        rating:
          maximum: 5
          minimum: 1
          type: integer
          format: int32
        createdAt:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/User'
        event:
          $ref: '#/components/schemas/Event'
        _links:
          $ref: '#/components/schemas/Links'
    CreateEventRequest:
      required:
      - description
      - location
      - price
      - seatingCapacity
      - title
      type: object
      properties:
        title:
          type: string
        location:
          type: string
        price:
          type: number
          format: double
        startingDate:
          type: string
          format: date
        endingDate:
          type: string
          format: date
        seatingCapacity:
          type: integer
          format: int32
        description:
          type: string
    UpdateEventRequest:
      required:
      - description
      - price
      - seatingCapacity
      type: object
      properties:
        price:
          type: number
          format: double
        startingDate:
          type: string
          format: date
        endingDate:
          type: string
          format: date
        seatingCapacity:
          type: integer
          format: int32
        description:
          type: string
    UpdateEventResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        location:
          type: string
        price:
          type: number
          format: double
        startingDate:
          type: string
          format: date
        endingDate:
          type: string
          format: date
        seatingCapacity:
          type: integer
          format: int32
        description:
          type: string
        _links:
          $ref: '#/components/schemas/Links'
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    EntityModelUserProjections:
      type: object
      properties:
        id:
          type: integer
          format: int64
        ticketEntities:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Ticket'
        eventEntity:
          $ref: '#/components/schemas/Event'
        userRole:
          type: string
          enum:
          - PARTICIPANT
          - ORGANIZER
        email:
          type: string
        userName:
          type: string
        ticketEntity:
          uniqueItems: true
          type: array
          writeOnly: true
          items:
            $ref: '#/components/schemas/Ticket'
        _links:
          $ref: '#/components/schemas/Links'
    PageMetadata:
      type: object
      properties:
        size:
          type: integer
          format: int64
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int64
        number:
          type: integer
          format: int64
    PagedModelEntityModelUserProjections:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            userProjectionses:
              type: array
              items:
                $ref: '#/components/schemas/EntityModelUserProjections'
        _links:
          $ref: '#/components/schemas/Links'
        page:
          $ref: '#/components/schemas/PageMetadata'
    TicketProjections:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userEntity:
          $ref: '#/components/schemas/User'
        eventEntity:
          $ref: '#/components/schemas/Event'
        barcode:
          type: string
          format: uuid
        purchaseDate:
          type: string
          format: date-time
    CollectionModelEntityModelTicket:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            tickets:
              type: array
              items:
                $ref: '#/components/schemas/EntityModelTicket'
        _links:
          $ref: '#/components/schemas/Links'
    EntityModelTicket:
      type: object
      properties:
        id:
          type: integer
          format: int64
        purchaseDate:
          type: string
          format: date-time
        barcode:
          type: string
          format: uuid
        eventEntity:
          $ref: '#/components/schemas/Event'
        userEntity:
          $ref: '#/components/schemas/User'
        _links:
          $ref: '#/components/schemas/Links'
    CollectionModelEntityModelReview:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            reviews:
              type: array
              items:
                $ref: '#/components/schemas/EntityModelReview'
        _links:
          $ref: '#/components/schemas/Links'
    EntityModelReview:
      required:
      - content
      - rating
      - title
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        content:
          maxLength: 100
          minLength: 0
          type: string
        rating:
          maximum: 5
          minimum: 1
          type: integer
          format: int32
        createdAt:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/User'
        event:
          $ref: '#/components/schemas/Event'
        _links:
          $ref: '#/components/schemas/Links'
    CollectionModelEntityModelEvent:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            events:
              type: array
              items:
                $ref: '#/components/schemas/EntityModelEvent'
        _links:
          $ref: '#/components/schemas/Links'
    EntityModelEvent:
      required:
      - description
      - location
      - price
      - seatingCapacity
      - title
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        location:
          type: string
        price:
          type: number
          format: double
        startingDate:
          type: string
          format: date
        endingDate:
          type: string
          format: date
        seatingCapacity:
          type: integer
          format: int32
        description:
          type: string
        userEntity:
          $ref: '#/components/schemas/User'
        ticketEntities:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Ticket'
        _links:
          $ref: '#/components/schemas/Links'
    CollectionModelEvent:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            events:
              type: array
              items:
                $ref: '#/components/schemas/Event'
        _links:
          $ref: '#/components/schemas/Links'
    Link:
      type: object
      properties:
        href:
          type: string
        hreflang:
          type: string
        title:
          type: string
        type:
          type: string
        deprecation:
          type: string
        profile:
          type: string
        name:
          type: string
        templated:
          type: boolean
